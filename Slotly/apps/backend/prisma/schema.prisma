generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @default(uuid())
  email            String            @unique
  password         String
  name             String
  role             Role              @default(CUSTOMER)
  phone            String?
  createdAt        DateTime          @default(now())
  bookings         Booking[]
  businesses       Business[]        @relation("OwnerBusinesses")
  staffOf          Business[]        @relation("BusinessStaff")
  staffEnrollments StaffEnrollment[]

  favoriteBusinesses Favorite[] @relation("FavoriteOwner")
  favoritedAsStaff   Favorite[] @relation("FavoriteStaff")

  userCoupons UserCoupon[]

  referralsMade     Referral[] @relation("Referrer")
  referralsReceived Referral?  @relation("Referred")

  reviews Review[]

  notifications Notification[]

  staffBookings Booking[] @relation("StaffBookings")

  availabilitySlots Availability[]

  timeOffRequests TimeOffRequest[]
}

model Business {
  id                   String                @id @default(uuid())
  name                 String                @unique
  description          String?
  ownerId              String
  createdAt            DateTime              @default(now())
  adCampaigns          AdCampaign[]
  bookings             Booking[]
  owner                User                  @relation("OwnerBusinesses", fields: [ownerId], references: [id])
  services             Service[]
  subscription         Subscription?
  staff                User[]                @relation("BusinessStaff")
  businessVerification BusinessVerification?
  staffEnrollments     StaffEnrollment[]

  favoritedBy Favorite[] @relation("FavoriteBusiness")

  reviews Review[]
}

model Service {
  id         String    @id @default(uuid())
  name       String
  price      Int
  duration   Int
  businessId String
  createdAt  DateTime  @default(now())
  bookings   Booking[]
  business   Business  @relation(fields: [businessId], references: [id])
}

model Booking {
  id                          String        @id @default(uuid())
  userId                      String
  staffId                     String?
  serviceId                   String
  businessId                  String
  startTime                   DateTime
  endTime                     DateTime
  status                      BookingStatus @default(PENDING)
  createdAt                   DateTime      @default(now())
  business                    Business      @relation(fields: [businessId], references: [id])
  service                     Service       @relation(fields: [serviceId], references: [id])
  user                        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  staff                       User?         @relation("StaffBookings", fields: [staffId], references: [id]) // NEW
  cancellationDeadlineMinutes Int           @default(120)
  lateCancellationFee         Int           @default(5000)
  payment                     Payment?
  reminder                    Reminder?
}

model Payment {
  id        String        @id @default(uuid())
  bookingId String        @unique
  amount    Int
  method    PaymentMethod
  status    PaymentStatus
  fee       Int
  createdAt DateTime      @default(now())
  booking   Booking       @relation(fields: [bookingId], references: [id])
}

model Subscription {
  id         String           @id @default(uuid())
  businessId String           @unique
  plan       SubscriptionPlan
  startDate  DateTime
  endDate    DateTime
  isActive   Boolean          @default(true)
  business   Business         @relation(fields: [businessId], references: [id])
}

model AdCampaign {
  id         String   @id @default(uuid())
  businessId String
  title      String
  budget     Int
  startDate  DateTime
  endDate    DateTime
  isActive   Boolean  @default(true)
  business   Business @relation(fields: [businessId], references: [id])
}

model Reminder {
  id        String         @id @default(uuid())
  bookingId String         @unique
  sendAt    DateTime
  sent      Boolean        @default(false)
  method    ReminderMethod
  booking   Booking        @relation(fields: [bookingId], references: [id])
}

model BusinessVerification {
  id              String             @id @default(uuid())
  businessId      String             @unique
  type            String
  idNumber        String
  licenseUrl      String?
  regNumber       String?
  idPhotoUrl      String
  selfieWithIdUrl String?
  status          VerificationStatus @default(PENDING)
  reviewedAt      DateTime?
  createdAt       DateTime           @default(now())
  business        Business           @relation(fields: [businessId], references: [id])
}

model StaffEnrollment {
  id              String           @id @default(uuid())
  userId          String
  businessId      String
  idNumber        String
  idPhotoUrl      String
  selfieWithIdUrl String
  status          EnrollmentStatus @default(PENDING)
  submittedAt     DateTime         @default(now())
  reviewedAt      DateTime?

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  business Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@unique([userId, businessId]) // Prevent duplicate applications
}

model Favorite {
  id         String  @id @default(uuid())
  userId     String
  businessId String?
  staffId    String?

  user     User      @relation("FavoriteOwner", fields: [userId], references: [id])
  business Business? @relation("FavoriteBusiness", fields: [businessId], references: [id]) // âœ… Add relation name
  staff    User?     @relation("FavoriteStaff", fields: [staffId], references: [id])

  createdAt DateTime @default(now())

  @@unique([userId, businessId])
  @@unique([userId, staffId])
}

model Coupon {
  id           String   @id @default(uuid())
  code         String   @unique
  description  String?
  discount     Int
  isPercentage Boolean  @default(false)
  expiresAt    DateTime
  createdAt    DateTime @default(now())

  userCoupons UserCoupon[]
}

model UserCoupon {
  id       String    @id @default(uuid())
  userId   String
  couponId String
  usedAt   DateTime?

  user   User   @relation(fields: [userId], references: [id])
  coupon Coupon @relation(fields: [couponId], references: [id])

  @@unique([userId, couponId])
}

model Referral {
  id             String   @id @default(uuid())
  referrerId     String
  referredUserId String   @unique
  createdAt      DateTime @default(now())
  rewardIssued   Boolean  @default(false)

  referrer     User @relation("Referrer", fields: [referrerId], references: [id])
  referredUser User @relation("Referred", fields: [referredUserId], references: [id])
}

model Review {
  id         String   @id @default(uuid())
  userId     String
  businessId String
  rating     Int
  comment    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user     User     @relation(fields: [userId], references: [id])
  business Business @relation(fields: [businessId], references: [id])

  @@unique([userId, businessId])
}

model Notification {
  id        String           @id @default(uuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())

  user User @relation(fields: [userId], references: [id])
}

model Availability {
  id        String   @id @default(uuid())
  staffId   String
  startTime DateTime
  endTime   DateTime
  createdAt DateTime @default(now())

  staff User @relation(fields: [staffId], references: [id], onDelete: Cascade)

  @@index([staffId, startTime, endTime])
}

model TimeOffRequest {
  id          String   @id @default(uuid())
  staffId     String
  reason      String?
  startDate   DateTime
  endDate     DateTime
  status      TimeOffStatus @default(PENDING)
  createdAt   DateTime @default(now())
  reviewedAt  DateTime?

  staff User @relation(fields: [staffId], references: [id], onDelete: Cascade)

  @@index([staffId, startDate, endDate])
}

enum TimeOffStatus {
  PENDING
  APPROVED
  REJECTED
}


enum NotificationType {
  BOOKING
  COUPON
  REFERRAL
}

enum Role {
  ADMIN
  BUSINESS_OWNER
  STAFF
  CUSTOMER
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  RESCHEDULED
}

enum PaymentMethod {
  MPESA
  AIRTEL_MONEY
  CARD
  OTHER
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  REFUNDED
}

enum SubscriptionPlan {
  BASIC
  STANDARD
  PREMIUM
}

enum ReminderMethod {
  EMAIL
  SMS
  PUSH
}

enum VerificationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum EnrollmentStatus {
  PENDING
  APPROVED
  REJECTED
}
