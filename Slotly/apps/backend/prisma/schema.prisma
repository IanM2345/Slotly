generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String     @id @default(uuid())
  email      String     @unique
  password   String
  name       String
  role       Role       @default(CUSTOMER)
  phone      String?
  createdAt  DateTime   @default(now())
  bookings   Booking[]
  businesses Business[] @relation("OwnerBusinesses")
  staffOf    Business[] @relation("BusinessStaff")
}

model Business {
  id           String        @id @default(uuid())
  name         String
  description  String?
  ownerId      String
  createdAt    DateTime      @default(now())
  adCampaigns  AdCampaign[]
  bookings     Booking[]
  owner        User          @relation("OwnerBusinesses", fields: [ownerId], references: [id])
  services     Service[]
  subscription Subscription?
  staff        User[]        @relation("BusinessStaff")

  @@unique([name, ownerId]) 
}

model Service {
  id         String    @id @default(uuid())
  name       String
  price      Int
  duration   Int
  businessId String
  createdAt  DateTime  @default(now())
  bookings   Booking[]
  business   Business  @relation(fields: [businessId], references: [id])
}

model Booking {
  id         String        @id @default(uuid())
  userId     String
  serviceId  String
  businessId String
  time       DateTime
  status     BookingStatus @default(PENDING)
  createdAt  DateTime      @default(now())
  business   Business      @relation(fields: [businessId], references: [id])
  service    Service       @relation(fields: [serviceId], references: [id])
  user       User          @relation(fields: [userId], references: [id])
  payment    Payment?
  reminder   Reminder?
}

model Payment {
  id        String        @id @default(uuid())
  bookingId String        @unique
  amount    Int
  method    PaymentMethod
  status    PaymentStatus
  fee       Int
  createdAt DateTime      @default(now())
  booking   Booking       @relation(fields: [bookingId], references: [id])
}

model Subscription {
  id         String           @id @default(uuid())
  businessId String           @unique
  plan       SubscriptionPlan
  startDate  DateTime
  endDate    DateTime
  isActive   Boolean          @default(true)
  business   Business         @relation(fields: [businessId], references: [id])
}

model AdCampaign {
  id         String   @id @default(uuid())
  businessId String
  title      String
  budget     Int
  startDate  DateTime
  endDate    DateTime
  isActive   Boolean  @default(true)
  business   Business @relation(fields: [businessId], references: [id])
}

model Reminder {
  id        String         @id @default(uuid())
  bookingId String         @unique
  sendAt    DateTime
  sent      Boolean        @default(false)
  method    ReminderMethod
  booking   Booking        @relation(fields: [bookingId], references: [id])
}

enum Role {
  ADMIN
  BUSINESS_OWNER
  STAFF
  CUSTOMER
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum PaymentMethod {
  MPESA
  AIRTEL_MONEY
  CARD
  OTHER
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  REFUNDED
}

enum SubscriptionPlan {
  BASIC
  STANDARD
  PREMIUM
}

enum ReminderMethod {
  EMAIL
  SMS
  PUSH
}
