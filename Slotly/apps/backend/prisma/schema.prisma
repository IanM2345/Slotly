generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  email          String?      @unique
  phone          String?      @unique
  password       String? // Made optional for OTP/dev login flows
  name           String? // Made optional for OTP/dev login flows
  role           Role         @default(CUSTOMER)
  referredById   String?      @db.ObjectId
  referredBy     User?        @relation("UserReferredBy", fields: [referredById], references: [id], onDelete: NoAction, onUpdate: NoAction)
  referralsMade  User[]       @relation("UserReferredBy")
  referralsGiven Referral[]   @relation("ReferrerUser")
  referralsTaken Referral[]   @relation("ReferredUser")
  userCoupons    UserCoupon[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  otp          String?
  otpVerified  Boolean?  @default(false)
  otpExpiresAt DateTime?

  // Relations
  recentSearches   RecentSearch[]
  serviceStaff     ServiceStaff[]
  promoRedemptions PromoRedemption[]
  ownedBusinesses  Business[]        @relation("BusinessOwner")
  refreshTokens    RefreshToken[]
  bookings         Booking[]         @relation("UserBookings")
  staffBookings    Booking[]         @relation("StaffBookings")
  markedBookings   Booking[]         @relation("BookingMarker")
  reviews          Review[]          @relation("UserReviews")
  notifications    Notification[]    @relation("UserNotifications")
  staffEnrollments StaffEnrollment[] @relation("StaffUser")
  availability     Availability[]    @relation("StaffAvailability")
  timeOffRequests  TimeOffRequest[]  @relation("StaffTimeOff")
  suspensionLogs   SuspensionLog[]   @relation("UserSuspensions")
  adminActions     SuspensionLog[]   @relation("AdminActions")
  previewLogs      PreviewLog[]      @relation("UserPreviews")
  downloadLogs     DownloadLog[]     @relation("UserDownloads")

  address        UserAddress?
  passwordResets PasswordReset[]
}

model Business {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  name           String        @unique
  description    String?
  ownerId        String        @db.ObjectId
  owner          User          @relation("BusinessOwner", fields: [ownerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  logoUrl        String?
  suspended      Boolean       @default(false)
  suspendedUntil DateTime?
  type           BusinessType? // Made it an enum for type safety
  hours          Json?
  address        String
  latitude       Float
  longitude      Float
  searchCount    Int           @default(0)

  // âœ… IntaSend payouts (clean, unified)
  payoutType       PayoutType?
  mpesaPhoneNumber String? // B2C payouts to phone
  tillNumber       String?
  paybillNumber    String?
  accountRef       String? // for paybill account reference if required
  bankName         String?
  bankAccount      String?
  accountName      String?

  plan SubscriptionPlan @default(LEVEL_1)

  // Relations
  addOns               AddOn[]               @relation("BusinessAddOns")
  services             Service[]             @relation("BusinessServices")
  promoRedemptions     PromoRedemption[]     @relation("BusinessPromos")
  verification         BusinessVerification?
  subscription         Subscription?
  adCampaigns          AdCampaign[]          @relation("BusinessCampaigns")
  serviceBundles       ServiceBundle[]       @relation("BusinessBundles")
  monthlyReports       MonthlyReport[]       @relation("BusinessReports")
  suspensionLogs       SuspensionLog[]       @relation("BusinessSuspensions")
  coupons              Coupon[]              @relation("BusinessCoupons")
  reviews              Review[]              @relation("BusinessReviews")
  bookings             Booking[]             @relation("BusinessBookings")
  payments             Payment[]             @relation("BusinessPayments")
  subscriptionPayments SubscriptionPayment[] @relation("BusinessSubscriptionPayments")
  staffEnrollments     StaffEnrollment[]     @relation("BusinessStaff")
  previewLogs          PreviewLog[]          @relation("BusinessPreviews")
  availability         Availability[]
  timeOffRequests      TimeOffRequest[]

  @@index([ownerId])
  @@index([plan])
  @@index([type])
}

// ---------- Payment ----------
model Payment {
  id                String         @id @default(auto()) @map("_id") @db.ObjectId
  type              PaymentContext @default(BOOKING)
  bookingId         String?        @db.ObjectId
  businessId        String?        @db.ObjectId
  amount            Int
  method            PaymentMethod
  status            PaymentStatus
  fee               Int            @default(0)
  provider          String? // "INTASEND"
  providerPaymentId String? // IntaSend transaction id
  providerPayoutId  String? // IntaSend payout id
  txRef             String?        @unique
  createdAt         DateTime       @default(now())

  // Relations
  booking  Booking?  @relation("BookingPayments", fields: [bookingId], references: [id])
  business Business? @relation("BusinessPayments", fields: [businessId], references: [id])

  @@index([bookingId])
  @@index([businessId])
  @@index([createdAt])
}

enum PaymentContext {
  BOOKING
  SUBSCRIPTION
  CANCELLATION
}

model Service {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  price      Int
  duration   Int
  category   String?
  available  Boolean  @default(true)
  businessId String   @db.ObjectId
  business   Business @relation("BusinessServices", fields: [businessId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdAt  DateTime @default(now())

  // Relations
  serviceStaff   ServiceStaff[]    @relation("ServiceStaff")
  bookings       Booking[]         @relation("ServiceBookings")
  serviceImages  ServiceImage[]    @relation("ServiceImages")
  bundleServices ServiceInBundle[] @relation("BundledServices")

  @@index([businessId])
  @@index([category])
}

model Booking {
  id                          String        @id @default(auto()) @map("_id") @db.ObjectId
  userId                      String        @db.ObjectId
  staffId                     String?       @db.ObjectId
  serviceId                   String        @db.ObjectId
  businessId                  String        @db.ObjectId
  startTime                   DateTime
  endTime                     DateTime
  status                      BookingStatus @default(PENDING)
  cancelReason                String?
  completedAt                 DateTime?
  noShowAt                    DateTime?
  markedById                  String?       @db.ObjectId
  createdAt                   DateTime      @default(now())
  cancellationDeadlineMinutes Int           @default(120)
  lateCancellationFee         Int           @default(5000)

  couponId String? @db.ObjectId
  coupon   Coupon? @relation(fields: [couponId], references: [id])

  // Relations
  user     User      @relation("UserBookings", fields: [userId], references: [id])
  staff    User?     @relation(name: "StaffBookings", fields: [staffId], references: [id])
  service  Service   @relation("ServiceBookings", fields: [serviceId], references: [id])
  business Business  @relation("BusinessBookings", fields: [businessId], references: [id])
  markedBy User?     @relation(name: "BookingMarker", fields: [markedById], references: [id])
  payments Payment[] @relation("BookingPayments")
  reminder Reminder?

  @@index([businessId, status])
  @@index([staffId, startTime])
  @@index([businessId])
  @@index([userId])
  @@index([startTime])
}

model Subscription {
  id         String           @id @default(auto()) @map("_id") @db.ObjectId
  businessId String           @unique @db.ObjectId
  business   Business         @relation(fields: [businessId], references: [id])
  plan       SubscriptionPlan
  startDate  DateTime
  endDate    DateTime
  isActive   Boolean          @default(true)

  // Relations
  payments SubscriptionPayment[] @relation("SubscriptionPayments")
}

model Reminder {
  id        String         @id @default(auto()) @map("_id") @db.ObjectId
  bookingId String         @unique @db.ObjectId
  booking   Booking        @relation(fields: [bookingId], references: [id])
  sendAt    DateTime
  sent      Boolean        @default(false)
  method    ReminderMethod
}

model Review {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  businessId String   @db.ObjectId
  rating     Int
  comment    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  flagged    Boolean  @default(false)

  // Relations
  user     User     @relation("UserReviews", fields: [userId], references: [id])
  business Business @relation("BusinessReviews", fields: [businessId], references: [id])

  @@index([businessId])
  @@index([userId])
}

model Coupon {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  code           String   @unique
  description    String?
  discount       Int
  isPercentage   Boolean  @default(false)
  expiresAt      DateTime
  createdAt      DateTime @default(now())
  createdByAdmin Boolean  @default(false)
  usageLimit     Int      @default(1)
  timesUsed      Int      @default(0)
  minimumSpend   Int?
  businessId     String   @db.ObjectId
  business       Business @relation("BusinessCoupons", fields: [businessId], references: [id])

  // Relations
  userCoupons UserCoupon[] @relation("CouponUsage")
  Booking     Booking[]

  @@index([businessId])
}

model UserCoupon {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  userId     String    @db.ObjectId
  couponId   String    @db.ObjectId
  usedAt     DateTime?
  issuedFrom String?

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  coupon Coupon @relation("CouponUsage", fields: [couponId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([userId])
  @@index([couponId])
}

model Referral {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  referrerId        String   @db.ObjectId
  referredUserId    String   @db.ObjectId
  completedBookings Int      @default(0)
  rewardIssued      Boolean  @default(false)
  createdAt         DateTime @default(now())

  // Relations
  referrer     User @relation("ReferrerUser", fields: [referrerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  referredUser User @relation("ReferredUser", fields: [referredUserId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([referrerId])
  @@index([referredUserId])
}

model Notification {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  userId    String           @db.ObjectId
  user      User             @relation("UserNotifications", fields: [userId], references: [id])
  type      NotificationType
  title     String
  message   String
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())

  @@index([userId])
  @@index([createdAt])
}

model Availability {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  staffId    String    @db.ObjectId
  staff      User      @relation(name: "StaffAvailability", fields: [staffId], references: [id])
  businessId String?   @db.ObjectId
  business   Business? @relation(fields: [businessId], references: [id])
  startTime  DateTime
  endTime    DateTime
  createdAt  DateTime  @default(now())

  @@index([staffId])
  @@index([businessId])
  @@index([staffId, businessId, startTime])
}

model TimeOffRequest {
  id         String        @id @default(auto()) @map("_id") @db.ObjectId
  staffId    String        @db.ObjectId
  staff      User          @relation(name: "StaffTimeOff", fields: [staffId], references: [id])
  businessId String?       @db.ObjectId
  business   Business?     @relation(fields: [businessId], references: [id])
  reason     String?
  startDate  DateTime
  endDate    DateTime
  status     TimeOffStatus @default(PENDING)
  createdAt  DateTime      @default(now())
  reviewedAt DateTime?

  @@index([staffId])
  @@index([businessId])
  @@index([staffId, businessId, startDate])
}

model AdCampaign {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  businessId String   @db.ObjectId
  business   Business @relation("BusinessCampaigns", fields: [businessId], references: [id])
  title      String
  budget     Int
  startDate  DateTime
  endDate    DateTime
  isActive   Boolean  @default(true)

  @@index([businessId])
}

model ServiceImage {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  url       String
  serviceId String   @db.ObjectId
  service   Service  @relation("ServiceImages", fields: [serviceId], references: [id])
  createdAt DateTime @default(now())

  @@index([serviceId])
}

model BusinessVerification {
  id              String             @id @default(auto()) @map("_id") @db.ObjectId
  businessId      String             @unique @db.ObjectId
  business        Business           @relation(fields: [businessId], references: [id])
  type            String
  idNumber        String
  licenseUrl      String?
  regNumber       String?
  idPhotoUrl      String
  selfieWithIdUrl String?
  status          VerificationStatus @default(PENDING)
  reviewedAt      DateTime?
  createdAt       DateTime           @default(now())

  @@index([status])
}

model StaffEnrollment {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  userId          String           @db.ObjectId
  user            User             @relation("StaffUser", fields: [userId], references: [id])
  businessId      String           @db.ObjectId
  business        Business         @relation("BusinessStaff", fields: [businessId], references: [id])
  idNumber        String
  idPhotoUrl      String
  selfieWithIdUrl String
  status          EnrollmentStatus @default(PENDING)
  submittedAt     DateTime         @default(now())
  reviewedAt      DateTime?

  @@unique([userId, businessId])
  @@index([userId])
  @@index([businessId])
  @@index([status])
}

model ServiceBundle {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  price       Int
  duration    Int
  businessId  String   @db.ObjectId
  business    Business @relation("BusinessBundles", fields: [businessId], references: [id])
  createdAt   DateTime @default(now())

  // Relations
  bundleServices ServiceInBundle[] @relation("BundleContents")

  @@index([businessId])
}

model ServiceInBundle {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  bundleId  String        @db.ObjectId
  bundle    ServiceBundle @relation("BundleContents", fields: [bundleId], references: [id])
  serviceId String        @db.ObjectId
  service   Service       @relation("BundledServices", fields: [serviceId], references: [id])
  position  Int

  @@index([bundleId])
  @@index([serviceId])
}

model PromoRedemption {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  userId     String    @db.ObjectId
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  code       String
  plan       String?
  redeemedAt DateTime  @default(now())
  trialEnd   DateTime
  businessId String?   @db.ObjectId // âœ… Make this NULLABLE
  business   Business? @relation("BusinessPromos", fields: [businessId], references: [id], onDelete: SetNull) // âœ… Make relation optional
  consumedAt DateTime? // âœ… Add consumed timestamp

  @@unique([userId, code])
  @@index([userId, code, businessId]) // âœ… Add composite index
  @@map("promo_redemptions")
}

model ServiceStaff {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  businessId String   @db.ObjectId
  serviceId  String   @db.ObjectId
  service    Service  @relation("ServiceStaff", fields: [serviceId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  staffId    String   @db.ObjectId
  staff      User     @relation(fields: [staffId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdAt  DateTime @default(now())

  @@unique([serviceId, staffId])
  @@index([businessId])
  @@index([serviceId])
  @@index([staffId])
}

model MonthlyReport {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  businessId String   @db.ObjectId
  business   Business @relation("BusinessReports", fields: [businessId], references: [id])
  period     String
  fileUrl    String
  createdAt  DateTime @default(now())

  // Relations
  downloads DownloadLog[] @relation("ReportDownloads")

  @@index([businessId])
  @@index([period])
}

model SuspensionLog {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  userId        String?   @db.ObjectId
  suspendedUser User?     @relation(name: "UserSuspensions", fields: [userId], references: [id])
  businessId    String?   @db.ObjectId
  business      Business? @relation("BusinessSuspensions", fields: [businessId], references: [id])
  adminId       String    @db.ObjectId
  admin         User      @relation(name: "AdminActions", fields: [adminId], references: [id])
  reason        String?
  action        String
  timestamp     DateTime  @default(now())

  @@index([userId])
  @@index([businessId])
  @@index([adminId])
  @@index([timestamp])
}

model AddOn {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  businessId String    @db.ObjectId
  business   Business  @relation("BusinessAddOns", fields: [businessId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  type       AddOnType
  value      Int?
  isActive   Boolean   @default(true)
  createdAt  DateTime  @default(now())

  @@index([businessId])
}

model RecentSearch {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  service   String
  latitude  Float
  longitude Float
  category  String?
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([createdAt])
}

model WebhookLog {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  txRef      String   @unique
  type       String
  receivedAt DateTime @default(now())

  @@index([receivedAt])
}

model PreviewLog {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  user       User     @relation(name: "UserPreviews", fields: [userId], references: [id])
  businessId String   @db.ObjectId
  business   Business @relation("BusinessPreviews", fields: [businessId], references: [id])
  period     String
  createdAt  DateTime @default(now())

  @@index([userId])
  @@index([businessId])
}

model DownloadLog {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  reportId     String        @db.ObjectId
  report       MonthlyReport @relation("ReportDownloads", fields: [reportId], references: [id])
  userId       String        @db.ObjectId
  user         User          @relation(name: "UserDownloads", fields: [userId], references: [id])
  downloadedAt DateTime      @default(now())

  @@index([reportId])
  @@index([userId])
}

model SubscriptionPayment {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  subscriptionId String       @db.ObjectId
  subscription   Subscription @relation("SubscriptionPayments", fields: [subscriptionId], references: [id])
  businessId     String?      @db.ObjectId
  business       Business?    @relation("BusinessSubscriptionPayments", fields: [businessId], references: [id])

  amount   Int
  currency String        @default("KES")
  method   PaymentMethod
  status   PaymentStatus
  fee      Int           @default(0)

  // tie this to Payment.txRef (or provider reference) for easy joins-by-ref in code
  txRef             String? @unique
  provider          String? // "INTASEND"
  providerPaymentId String? // PSP transaction id
  checkoutLink      String?
  reference         String? // internal or PSP ref you passed in
  metadata          Json?

  returnUrl String?
  cancelUrl String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([subscriptionId])
  @@index([businessId])
  @@index([createdAt])
}

model RefreshToken {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  jti        String    @unique // token id
  userId     String    @db.ObjectId
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  revokedAt  DateTime?
  expiresAt  DateTime
  createdAt  DateTime  @default(now())
  replacedBy String? // jti of replacement
  userAgent  String?
  ip         String?
  lastSeenAt DateTime?
  lastPath   String?

  @@index([userId])
  @@index([expiresAt])
}

model UserAddress {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @unique @db.ObjectId
  county       String?
  city         String?
  constituency String?
  street       String?
  apartment    String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PasswordReset {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  userId    String    @db.ObjectId
  user      User      @relation(fields: [userId], references: [id]) // no onDelete for Mongo
  token     String    @unique
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime  @default(now())

  @@index([userId])
}

enum BusinessType {
  FORMAL
  INFORMAL
}

enum AddOnType {
  EXTRA_STAFF
  WHATSAPP_REMINDERS
  BRANDED_PAGE
  CUSTOM_ANALYTICS
}

enum TimeOffStatus {
  PENDING
  APPROVED
  REJECTED
}

enum NotificationType {
  BOOKING
  PAYMENT
  COUPON
  APPLICATION
  TIME_OFF
  STAFF_ASSIGNMENT
  SYSTEM
  REVIEW
  SUBSCRIPTION
  REFERRAL
}

enum Role {
  ADMIN
  BUSINESS_OWNER
  STAFF
  CUSTOMER
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  RESCHEDULED
  NO_SHOW
}

enum PaymentMethod {
  MPESA
  AIRTEL_MONEY
  CARD
  OTHER
  IN_PERSON
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  REFUNDED
}

enum SubscriptionPlan {
  LEVEL_1
  LEVEL_2
  LEVEL_3
  LEVEL_4
  LEVEL_5
  LEVEL_6
}

enum ReminderMethod {
  EMAIL
  SMS
  PUSH
}

enum VerificationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum EnrollmentStatus {
  PENDING
  APPROVED
  REJECTED
}

enum PayoutType {
  MPESA_PHONE
  MPESA_TILL
  MPESA_PAYBILL
  BANK
}
